package lesson12;

public class Demo01 {
  public static void main (String[] args) {
    //【面试题】 read() 方法读取的是一个字节，为什么返回是int，而不是byte?)
    //如果使用FileInputStream读取图片数据

    /**
     * 00010111 00010111 00010111 00010111 
     * 00010111 11111111(卡在这) 00010111 00010111 
     * 
     * byte : 11111111
     * int  : 00000000 00000000 00000000 11111111
     *
     * byte: 1个字节8个bit（比特位），如果一个个字节读，则遇到8个1的数据，就会停（FileInputStream的read成员方法是遇到-1就结束, 这样就会很大概率出现无法读取完整数据流的情况
     * int: 4个字节8*4=32个bit(比特), 当8个1的数据11111111，前面会补3*8=24个0， 这样，int的类型，读取的数据就是255，而不是-1，则不会出现读取数据异常中断情况
     *
     *
     *
     * ### 为什么11111111在byte中表示为-1？
     * 因为在计算机中是以补的方式计算！ 即高位表示正负（正为0，负为1），反码的值是补码-1， 原码的值是反码除高位外全部去翻 即
     * 数据（补码） 11111111 （-1）
     * 反码         11111110
     * 原码（真实） 10000001 高位1 表示负数， 其他位为 0000001 ，1 ，所以为-1
     *
     * 加入使用FileInputStream读取图片的时候，
     * 图片中间有一段诗句刚好11111111（8个1） ，8个1表示为-1,用byte接受
     * java程序如果读取的是-1，后面的数据就不读取了
     * 如果把8个1转成int， 那就是00000000 00000000 00000000 1111111， 这个表示的255,而不是-1， 就规避了后面的数据不读取的问题
     */
  }

}

